/* eslint-disable */



const peggyParser: {parse: any, SyntaxError: any, DefaultTracer?: any} = // @generated by Peggy 4.0.2.
//
// https://peggyjs.org/
// @ts-ignore
(function() {
// @ts-ignore
  "use strict";

// @ts-ignore
function peg$subclass(child, parent) {
// @ts-ignore
  function C() { this.constructor = child; }
// @ts-ignore
  C.prototype = parent.prototype;
// @ts-ignore
  child.prototype = new C();
}

// @ts-ignore
function peg$SyntaxError(message, expected, found, location) {
// @ts-ignore
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
// @ts-ignore
  if (Object.setPrototypeOf) {
// @ts-ignore
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
// @ts-ignore
  self.expected = expected;
// @ts-ignore
  self.found = found;
// @ts-ignore
  self.location = location;
// @ts-ignore
  self.name = "SyntaxError";
// @ts-ignore
  return self;
}

// @ts-ignore
peg$subclass(peg$SyntaxError, Error);

// @ts-ignore
function peg$padEnd(str, targetLength, padString) {
// @ts-ignore
  padString = padString || " ";
// @ts-ignore
  if (str.length > targetLength) { return str; }
// @ts-ignore
  targetLength -= str.length;
// @ts-ignore
  padString += padString.repeat(targetLength);
// @ts-ignore
  return str + padString.slice(0, targetLength);
}

// @ts-ignore
peg$SyntaxError.prototype.format = function(sources) {
// @ts-ignore
  var str = "Error: " + this.message;
// @ts-ignore
  if (this.location) {
// @ts-ignore
    var src = null;
// @ts-ignore
    var k;
// @ts-ignore
    for (k = 0; k < sources.length; k++) {
// @ts-ignore
      if (sources[k].source === this.location.source) {
// @ts-ignore
        src = sources[k].text.split(/\r\n|\n|\r/g);
// @ts-ignore
        break;
      }
    }
// @ts-ignore
    var s = this.location.start;
// @ts-ignore
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
// @ts-ignore
      ? this.location.source.offset(s)
// @ts-ignore
      : s;
// @ts-ignore
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
// @ts-ignore
    if (src) {
// @ts-ignore
      var e = this.location.end;
// @ts-ignore
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
// @ts-ignore
      var line = src[s.line - 1];
// @ts-ignore
      var last = s.line === e.line ? e.column : line.length + 1;
// @ts-ignore
      var hatLen = (last - s.column) || 1;
// @ts-ignore
      str += "\n --> " + loc + "\n"
// @ts-ignore
          + filler + " |\n"
// @ts-ignore
          + offset_s.line + " | " + line + "\n"
// @ts-ignore
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
// @ts-ignore
          + peg$padEnd("", hatLen, "^");
// @ts-ignore
    } else {
// @ts-ignore
      str += "\n at " + loc;
    }
  }
// @ts-ignore
  return str;
};

// @ts-ignore
peg$SyntaxError.buildMessage = function(expected, found) {
// @ts-ignore
  var DESCRIBE_EXPECTATION_FNS = {
// @ts-ignore
    literal: function(expectation) {
// @ts-ignore
      return "\"" + literalEscape(expectation.text) + "\"";
    },

// @ts-ignore
    class: function(expectation) {
// @ts-ignore
      var escapedParts = expectation.parts.map(function(part) {
// @ts-ignore
        return Array.isArray(part)
// @ts-ignore
          ? classEscape(part[0]) + "-" + classEscape(part[1])
// @ts-ignore
          : classEscape(part);
      });

// @ts-ignore
      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

// @ts-ignore
    any: function() {
// @ts-ignore
      return "any character";
    },

// @ts-ignore
    end: function() {
// @ts-ignore
      return "end of input";
    },

// @ts-ignore
    other: function(expectation) {
// @ts-ignore
      return expectation.description;
    }
  };

// @ts-ignore
  function hex(ch) {
// @ts-ignore
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

// @ts-ignore
  function literalEscape(s) {
// @ts-ignore
    return s
// @ts-ignore
      .replace(/\\/g, "\\\\")
// @ts-ignore
      .replace(/"/g,  "\\\"")
// @ts-ignore
      .replace(/\0/g, "\\0")
// @ts-ignore
      .replace(/\t/g, "\\t")
// @ts-ignore
      .replace(/\n/g, "\\n")
// @ts-ignore
      .replace(/\r/g, "\\r")
// @ts-ignore
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
// @ts-ignore
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

// @ts-ignore
  function classEscape(s) {
// @ts-ignore
    return s
// @ts-ignore
      .replace(/\\/g, "\\\\")
// @ts-ignore
      .replace(/\]/g, "\\]")
// @ts-ignore
      .replace(/\^/g, "\\^")
// @ts-ignore
      .replace(/-/g,  "\\-")
// @ts-ignore
      .replace(/\0/g, "\\0")
// @ts-ignore
      .replace(/\t/g, "\\t")
// @ts-ignore
      .replace(/\n/g, "\\n")
// @ts-ignore
      .replace(/\r/g, "\\r")
// @ts-ignore
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
// @ts-ignore
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

// @ts-ignore
  function describeExpectation(expectation) {
// @ts-ignore
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

// @ts-ignore
  function describeExpected(expected) {
// @ts-ignore
    var descriptions = expected.map(describeExpectation);
// @ts-ignore
    var i, j;

// @ts-ignore
    descriptions.sort();

// @ts-ignore
    if (descriptions.length > 0) {
// @ts-ignore
      for (i = 1, j = 1; i < descriptions.length; i++) {
// @ts-ignore
        if (descriptions[i - 1] !== descriptions[i]) {
// @ts-ignore
          descriptions[j] = descriptions[i];
// @ts-ignore
          j++;
        }
      }
// @ts-ignore
      descriptions.length = j;
    }

// @ts-ignore
    switch (descriptions.length) {
// @ts-ignore
      case 1:
// @ts-ignore
        return descriptions[0];

// @ts-ignore
      case 2:
// @ts-ignore
        return descriptions[0] + " or " + descriptions[1];

// @ts-ignore
      default:
// @ts-ignore
        return descriptions.slice(0, -1).join(", ")
// @ts-ignore
          + ", or "
// @ts-ignore
          + descriptions[descriptions.length - 1];
    }
  }

// @ts-ignore
  function describeFound(found) {
// @ts-ignore
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

// @ts-ignore
  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

// @ts-ignore
function peg$parse(input, options) {
// @ts-ignore
  options = options !== undefined ? options : {};

// @ts-ignore
  var peg$FAILED = {};
// @ts-ignore
  var peg$source = options.grammarSource;

// @ts-ignore
  var peg$startRuleFunctions = { search: peg$parsesearch };
// @ts-ignore
  var peg$startRuleFunction = peg$parsesearch;

// @ts-ignore
  var peg$c0 = "has:";
  var peg$c1 = "is:";
  var peg$c2 = "\"";
  var peg$c3 = "tags";
  var peg$c4 = "\\\"";
  var peg$c5 = "-";
  var peg$c6 = "true";
  var peg$c7 = "1";
  var peg$c8 = "false";
  var peg$c9 = "0";
  var peg$c10 = "T";
  var peg$c11 = ":";
  var peg$c12 = ".";
  var peg$c13 = "Z";
  var peg$c14 = "%";
  var peg$c15 = "ms";
  var peg$c16 = "s";
  var peg$c17 = "min";
  var peg$c18 = "m";
  var peg$c19 = "hr";
  var peg$c20 = "h";
  var peg$c21 = "day";
  var peg$c22 = "d";
  var peg$c23 = "wk";
  var peg$c24 = "w";
  var peg$c25 = "bit";
  var peg$c26 = "kib";
  var peg$c27 = "mib";
  var peg$c28 = "gib";
  var peg$c29 = "tib";
  var peg$c30 = "pib";
  var peg$c31 = "eib";
  var peg$c32 = "zib";
  var peg$c33 = "yib";
  var peg$c34 = "bytes";
  var peg$c35 = "nb";
  var peg$c36 = "kb";
  var peg$c37 = "mb";
  var peg$c38 = "gb";
  var peg$c39 = "tb";
  var peg$c40 = "pb";
  var peg$c41 = "eb";
  var peg$c42 = "zb";
  var peg$c43 = "yb";
  var peg$c44 = ">=";
  var peg$c45 = "<=";
  var peg$c46 = "!=";
  var peg$c47 = "or";
  var peg$c48 = "and";
  var peg$c49 = "(";
  var peg$c50 = ")";
  var peg$c51 = "[";
  var peg$c52 = "]";
  var peg$c53 = "!";
  var peg$c54 = ",";
  var peg$c55 = " ";

  var peg$r0 = /^[^()\n ]/;
  var peg$r1 = /^[a-zA-Z0-9_.\-]/;
  var peg$r2 = /^[a-zA-Z0-9_.:\-]/;
  var peg$r3 = /^[^()\t\n, "]/;
  var peg$r4 = /^[^\t\n"]/;
  var peg$r5 = /^[^()\t\n ]/;
  var peg$r6 = /^[^"]/;
  var peg$r7 = /^[,\]]/;
  var peg$r8 = /^[^(), ]/;
  var peg$r9 = /^[0-9]/;
  var peg$r10 = /^[+\-]/;
  var peg$r11 = /^[wdhm]/;
  var peg$r12 = /^[bkm]/i;
  var peg$r13 = /^[<->]/;
  var peg$r14 = /^[\t\n )]/;

  var peg$e0 = peg$classExpectation(["(", ")", "\n", " "], true, false);
  var peg$e1 = peg$literalExpectation("has:", false);
  var peg$e2 = peg$literalExpectation("is:", false);
  var peg$e3 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_", ".", "-"], false, false);
  var peg$e4 = peg$literalExpectation("\"", false);
  var peg$e5 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_", ".", ":", "-"], false, false);
  var peg$e6 = peg$literalExpectation("tags", false);
  var peg$e7 = peg$classExpectation(["(", ")", "\t", "\n", ",", " ", "\""], true, false);
  var peg$e8 = peg$literalExpectation("\\\"", false);
  var peg$e9 = peg$classExpectation(["\t", "\n", "\""], true, false);
  var peg$e10 = peg$classExpectation(["(", ")", "\t", "\n", " "], true, false);
  var peg$e11 = peg$classExpectation(["\""], true, false);
  var peg$e12 = peg$literalExpectation("-", false);
  var peg$e13 = peg$classExpectation([",", "]"], false, false);
  var peg$e14 = peg$literalExpectation("true", true);
  var peg$e15 = peg$literalExpectation("1", false);
  var peg$e16 = peg$literalExpectation("false", true);
  var peg$e17 = peg$literalExpectation("0", false);
  var peg$e18 = peg$classExpectation(["(", ")", ",", " "], true, false);
  var peg$e19 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e20 = peg$literalExpectation("T", false);
  var peg$e21 = peg$literalExpectation(":", false);
  var peg$e22 = peg$literalExpectation(".", false);
  var peg$e23 = peg$classExpectation(["+", "-"], false, false);
  var peg$e24 = peg$literalExpectation("Z", false);
  var peg$e25 = peg$classExpectation(["w", "d", "h", "m"], false, false);
  var peg$e26 = peg$literalExpectation("%", false);
  var peg$e27 = peg$classExpectation(["b", "k", "m"], false, true);
  var peg$e28 = peg$literalExpectation("ms", false);
  var peg$e29 = peg$literalExpectation("s", false);
  var peg$e30 = peg$literalExpectation("min", false);
  var peg$e31 = peg$literalExpectation("m", false);
  var peg$e32 = peg$literalExpectation("hr", false);
  var peg$e33 = peg$literalExpectation("h", false);
  var peg$e34 = peg$literalExpectation("day", false);
  var peg$e35 = peg$literalExpectation("d", false);
  var peg$e36 = peg$literalExpectation("wk", false);
  var peg$e37 = peg$literalExpectation("w", false);
  var peg$e38 = peg$literalExpectation("bit", true);
  var peg$e39 = peg$literalExpectation("kib", true);
  var peg$e40 = peg$literalExpectation("mib", true);
  var peg$e41 = peg$literalExpectation("gib", true);
  var peg$e42 = peg$literalExpectation("tib", true);
  var peg$e43 = peg$literalExpectation("pib", true);
  var peg$e44 = peg$literalExpectation("eib", true);
  var peg$e45 = peg$literalExpectation("zib", true);
  var peg$e46 = peg$literalExpectation("yib", true);
  var peg$e47 = peg$literalExpectation("bytes", true);
  var peg$e48 = peg$literalExpectation("nb", true);
  var peg$e49 = peg$literalExpectation("kb", true);
  var peg$e50 = peg$literalExpectation("mb", true);
  var peg$e51 = peg$literalExpectation("gb", true);
  var peg$e52 = peg$literalExpectation("tb", true);
  var peg$e53 = peg$literalExpectation("pb", true);
  var peg$e54 = peg$literalExpectation("eb", true);
  var peg$e55 = peg$literalExpectation("zb", true);
  var peg$e56 = peg$literalExpectation("yb", true);
  var peg$e57 = peg$literalExpectation(">=", false);
  var peg$e58 = peg$literalExpectation("<=", false);
  var peg$e59 = peg$classExpectation([["<", ">"]], false, false);
  var peg$e60 = peg$literalExpectation("!=", false);
  var peg$e61 = peg$literalExpectation("OR", true);
  var peg$e62 = peg$literalExpectation("AND", true);
  var peg$e63 = peg$literalExpectation("(", false);
  var peg$e64 = peg$literalExpectation(")", false);
  var peg$e65 = peg$literalExpectation("[", false);
  var peg$e66 = peg$literalExpectation("]", false);
  var peg$e67 = peg$literalExpectation("!", false);
  var peg$e68 = peg$literalExpectation(",", false);
  var peg$e69 = peg$literalExpectation(" ", false);
  var peg$e70 = peg$classExpectation(["\t", "\n", " ", ")"], false, false);
  var peg$e71 = peg$anyExpectation();
// @ts-ignore

  var peg$f0 = function(space, terms) {
// @ts-ignore
      return [space, ...terms.flat()];
    };// @ts-ignore

  var peg$f1 = function(space, terms) {
// @ts-ignore
      return [space, ...terms.flat()];
    };// @ts-ignore

  var peg$f2 = function() {
// @ts-ignore
      return tc.tokenLogicBoolean(text().toUpperCase());
    };// @ts-ignore

  var peg$f3 = function(spaces, inner) {
// @ts-ignore
      return tc.tokenLogicGroup([spaces, ...inner].flat());
    };// @ts-ignore

  var peg$f4 = function() {
// @ts-ignore
      return tc.tokenFreeText(text(), false);
    };// @ts-ignore

  var peg$f5 = function(value) {
// @ts-ignore
      return tc.tokenFreeText(value.value, true);
    };// @ts-ignore

  var peg$f6 = function(key, op, value) {
// @ts-ignore
      return tc.predicateFilter(FilterType.DATE, key, value, op)
    };// @ts-ignore

  var peg$f7 = function(key, op, value) {
// @ts-ignore
      return tc.tokenFilter(FilterType.DATE, key, value, op, false);
    };// @ts-ignore

  var peg$f8 = function(key, value) {
// @ts-ignore
      return tc.predicateFilter(FilterType.SPECIFIC_DATE, key)
    };// @ts-ignore

  var peg$f9 = function(key, value) {
// @ts-ignore
      return tc.tokenFilter(FilterType.SPECIFIC_DATE, key, value, opDefault, false);
    };// @ts-ignore

  var peg$f10 = function(key, value) {
// @ts-ignore
      return tc.predicateFilter(FilterType.RELATIVE_DATE, key)
    };// @ts-ignore

  var peg$f11 = function(key, value) {
// @ts-ignore
      return tc.tokenFilter(FilterType.RELATIVE_DATE, key, value, opDefault, false);
    };// @ts-ignore

  var peg$f12 = function(negation, key, op, value) {
// @ts-ignore
      return tc.predicateFilter(FilterType.DURATION, key)
    };// @ts-ignore

  var peg$f13 = function(negation, key, op, value) {
// @ts-ignore
      return tc.tokenFilter(FilterType.DURATION, key, value, op, !!negation);
    };// @ts-ignore

  var peg$f14 = function(negation, key, op, value) {
// @ts-ignore
      return tc.predicateFilter(FilterType.SIZE, key)
    };// @ts-ignore

  var peg$f15 = function(negation, key, op, value) {
// @ts-ignore
      return tc.tokenFilter(FilterType.SIZE, key, value, op, !!negation);
    };// @ts-ignore

  var peg$f16 = function(negation, key, value) {
// @ts-ignore
      return tc.predicateFilter(FilterType.BOOLEAN, key)
    };// @ts-ignore

  var peg$f17 = function(negation, key, value) {
// @ts-ignore
      return tc.tokenFilter(FilterType.BOOLEAN, key, value, opDefault, !!negation);
    };// @ts-ignore

  var peg$f18 = function(negation, key, value) {
// @ts-ignore
      return tc.predicateFilter(FilterType.NUMERIC_IN, key)
    };// @ts-ignore

  var peg$f19 = function(negation, key, value) {
// @ts-ignore
      return tc.tokenFilter(FilterType.NUMERIC_IN, key, value, opDefault, !!negation);
    };// @ts-ignore

  var peg$f20 = function(negation, key, op, value) {
// @ts-ignore
      return tc.predicateFilter(FilterType.NUMERIC, key)
    };// @ts-ignore

  var peg$f21 = function(negation, key, op, value) {
// @ts-ignore
      return tc.tokenFilter(FilterType.NUMERIC, key, value, op, !!negation);
    };// @ts-ignore

  var peg$f22 = function(negation, key, op, value) {
// @ts-ignore
      return tc.predicateFilter(FilterType.AGGREGATE_DURATION, key)
  };// @ts-ignore

  var peg$f23 = function(negation, key, op, value) {
// @ts-ignore
      return tc.tokenFilter(FilterType.AGGREGATE_DURATION, key, value, op, !!negation);
    };// @ts-ignore

  var peg$f24 = function(negation, key, op, value) {
// @ts-ignore
      return tc.predicateFilter(FilterType.AGGREGATE_SIZE, key)
  };// @ts-ignore

  var peg$f25 = function(negation, key, op, value) {
// @ts-ignore
      return tc.tokenFilter(FilterType.AGGREGATE_SIZE, key, value, op, !!negation);
    };// @ts-ignore

  var peg$f26 = function(negation, key, op, value) {
// @ts-ignore
      return tc.predicateFilter(FilterType.AGGREGATE_PERCENTAGE, key)
    };// @ts-ignore

  var peg$f27 = function(negation, key, op, value) {
// @ts-ignore
      return tc.tokenFilter(FilterType.AGGREGATE_PERCENTAGE, key, value, op, !!negation);
    };// @ts-ignore

  var peg$f28 = function(negation, key, op, value) {
// @ts-ignore
      return tc.predicateFilter(FilterType.AGGREGATE_NUMERIC, key)
    };// @ts-ignore

  var peg$f29 = function(negation, key, op, value) {
// @ts-ignore
      return tc.tokenFilter(FilterType.AGGREGATE_NUMERIC, key, value, op, !!negation);
    };// @ts-ignore

  var peg$f30 = function(negation, key, op, value) {
// @ts-ignore
      return tc.predicateFilter(FilterType.AGGREGATE_DATE, key)
    };// @ts-ignore

  var peg$f31 = function(negation, key, op, value) {
// @ts-ignore
      return tc.tokenFilter(FilterType.AGGREGATE_DATE, key, value, op, !!negation);
    };// @ts-ignore

  var peg$f32 = function(negation, key, op, value) {
// @ts-ignore
      return tc.predicateFilter(FilterType.AGGREGATE_RELATIVE_DATE, key)
    };// @ts-ignore

  var peg$f33 = function(negation, key, op, value) {
// @ts-ignore
      return tc.tokenFilter(FilterType.AGGREGATE_RELATIVE_DATE, key, value, op, !!negation);
    };// @ts-ignore

  var peg$f34 = function(negation, key, value) {
// @ts-ignore
      return tc.predicateFilter(FilterType.HAS, key)
    };// @ts-ignore

  var peg$f35 = function(negation, key, value) {
// @ts-ignore
      return tc.tokenFilter(FilterType.HAS, key, value, opDefault, !!negation);
    };// @ts-ignore

  var peg$f36 = function(negation, key, value) {
// @ts-ignore
      return tc.predicateFilter(FilterType.IS, key)
    };// @ts-ignore

  var peg$f37 = function(negation, key, value) {
// @ts-ignore
      return tc.tokenFilter(FilterType.IS, key, value, opDefault, !!negation);
    };// @ts-ignore

  var peg$f38 = function(negation, key, value) {
// @ts-ignore
      return tc.predicateFilter(FilterType.TEXT_IN, key)
    };// @ts-ignore

  var peg$f39 = function(negation, key, value) {
// @ts-ignore
      return tc.tokenFilter(FilterType.TEXT_IN, key, value, opDefault, !!negation);
    };// @ts-ignore

  var peg$f40 = function(negation, key) {// @ts-ignore
 return tc.predicateTextOperator(key); };// @ts-ignore

  var peg$f41 = function(negation, key, op, value) {
// @ts-ignore
      return tc.predicateFilter(FilterType.TEXT, key)
    };// @ts-ignore

  var peg$f42 = function(negation, key, op, value) {
// @ts-ignore
      return tc.tokenFilter(FilterType.TEXT, key, value, op ? op[0] : opDefault, !!negation);
    };// @ts-ignore

  var peg$f43 = function(value) {
// @ts-ignore
      return tc.tokenKeySimple(value.join(''), false);
    };// @ts-ignore

  var peg$f44 = function(key) {
// @ts-ignore
      return tc.tokenKeySimple(key.join(''), true);
    };// @ts-ignore

  var peg$f45 = function(prefix, key) {
// @ts-ignore
      return tc.tokenKeyExplicitTag(prefix, key);
    };// @ts-ignore

  var peg$f46 = function(name, s1, args, s2) {
// @ts-ignore
      return tc.tokenKeyAggregate(name, args, s1, s2);
    };// @ts-ignore

  var peg$f47 = function(arg1, args) {
// @ts-ignore
      return tc.tokenKeyAggregateArgs(arg1, args);
    };// @ts-ignore

  var peg$f48 = function(param) {
// @ts-ignore
      return tc.tokenKeyAggregateParam(param.join(''), false);
    };// @ts-ignore

  var peg$f49 = function(param) {
// @ts-ignore
      return tc.tokenKeyAggregateParam(`"${param.join('')}"`, true);
    };// @ts-ignore

  var peg$f50 = function(value) {
// @ts-ignore
      return tc.tokenValueText(value.join(''), false);
    };// @ts-ignore

  var peg$f51 = function(value) {
// @ts-ignore
      return tc.tokenValueText(value.join(''), true);
    };// @ts-ignore

  var peg$f52 = function() {
// @ts-ignore
        return tc.tokenValueText(text(), false);
    };// @ts-ignore

  var peg$f53 = function(value, unit) {
// @ts-ignore
      return tc.tokenValueNumber(value.join(''), unit);
    };// @ts-ignore

  var peg$f54 = function(value) {
// @ts-ignore
      return tc.tokenValueBoolean(value);
    };// @ts-ignore

  var peg$f55 = function(item1, items) {
// @ts-ignore
      return tc.tokenValueTextList(item1, items);
    };// @ts-ignore

  var peg$f56 = function(item1, items) {
// @ts-ignore
      return tc.tokenValueNumberList(item1, items);
    };// @ts-ignore

  var peg$f57 = function() {
// @ts-ignore
      return tc.tokenValueIso8601Date(text());
    };// @ts-ignore

  var peg$f58 = function(sign, value, unit) {
// @ts-ignore
      return tc.tokenValueRelativeDate(value.join(''), sign, unit);
    };// @ts-ignore

  var peg$f59 = function(value, unit) {
// @ts-ignore
      return tc.tokenValueDuration(value, unit);
    };// @ts-ignore

  var peg$f60 = function(value, unit) {
// @ts-ignore
      return tc.tokenValueSize(value, unit);
    };// @ts-ignore

  var peg$f61 = function(value) {
// @ts-ignore
      return tc.tokenValuePercentage(value);
    };// @ts-ignore

  var peg$f62 = function() {// @ts-ignore
 return text(); };// @ts-ignore

  var peg$f63 = function() {// @ts-ignore
 return tc.tokenSpaces(text()) };
// @ts-ignore
  var peg$currPos = options.peg$currPos | 0;
// @ts-ignore
  var peg$savedPos = peg$currPos;
// @ts-ignore
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
// @ts-ignore
  var peg$maxFailPos = peg$currPos;
// @ts-ignore
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
// @ts-ignore
  var peg$silentFails = options.peg$silentFails | 0;

// @ts-ignore
  var peg$result;

// @ts-ignore
  if (options.startRule) {
// @ts-ignore
    if (!(options.startRule in peg$startRuleFunctions)) {
// @ts-ignore
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

// @ts-ignore
    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

// @ts-ignore
  function text() {
// @ts-ignore
    return input.substring(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function offset() {
// @ts-ignore
    return peg$savedPos;
  }

// @ts-ignore
  function range() {
// @ts-ignore
    return {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: peg$savedPos,
// @ts-ignore
      end: peg$currPos
    };
  }

// @ts-ignore
  function location() {
// @ts-ignore
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function expected(description, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      [peg$otherExpectation(description)],
// @ts-ignore
      input.substring(peg$savedPos, peg$currPos),
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function error(message, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildSimpleError(message, location);
  }

// @ts-ignore
  function peg$literalExpectation(text, ignoreCase) {
// @ts-ignore
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

// @ts-ignore
  function peg$classExpectation(parts, inverted, ignoreCase) {
// @ts-ignore
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

// @ts-ignore
  function peg$anyExpectation() {
// @ts-ignore
    return { type: "any" };
  }

// @ts-ignore
  function peg$endExpectation() {
// @ts-ignore
    return { type: "end" };
  }

// @ts-ignore
  function peg$otherExpectation(description) {
// @ts-ignore
    return { type: "other", description: description };
  }

// @ts-ignore
  function peg$computePosDetails(pos) {
// @ts-ignore
    var details = peg$posDetailsCache[pos];
// @ts-ignore
    var p;

// @ts-ignore
    if (details) {
// @ts-ignore
      return details;
// @ts-ignore
    } else {
// @ts-ignore
      if (pos >= peg$posDetailsCache.length) {
// @ts-ignore
        p = peg$posDetailsCache.length - 1;
// @ts-ignore
      } else {
// @ts-ignore
        p = pos;
// @ts-ignore
        while (!peg$posDetailsCache[--p]) {}
      }

// @ts-ignore
      details = peg$posDetailsCache[p];
// @ts-ignore
      details = {
// @ts-ignore
        line: details.line,
// @ts-ignore
        column: details.column
      };

// @ts-ignore
      while (p < pos) {
// @ts-ignore
        if (input.charCodeAt(p) === 10) {
// @ts-ignore
          details.line++;
// @ts-ignore
          details.column = 1;
// @ts-ignore
        } else {
// @ts-ignore
          details.column++;
        }

// @ts-ignore
        p++;
      }

// @ts-ignore
      peg$posDetailsCache[pos] = details;

// @ts-ignore
      return details;
    }
  }

// @ts-ignore
  function peg$computeLocation(startPos, endPos, offset) {
// @ts-ignore
    var startPosDetails = peg$computePosDetails(startPos);
// @ts-ignore
    var endPosDetails = peg$computePosDetails(endPos);

// @ts-ignore
    var res = {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: {
// @ts-ignore
        offset: startPos,
// @ts-ignore
        line: startPosDetails.line,
// @ts-ignore
        column: startPosDetails.column
      },
// @ts-ignore
      end: {
// @ts-ignore
        offset: endPos,
// @ts-ignore
        line: endPosDetails.line,
// @ts-ignore
        column: endPosDetails.column
      }
    };
// @ts-ignore
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
// @ts-ignore
      res.start = peg$source.offset(res.start);
// @ts-ignore
      res.end = peg$source.offset(res.end);
    }
// @ts-ignore
    return res;
  }

// @ts-ignore
  function peg$fail(expected) {
// @ts-ignore
    if (peg$currPos < peg$maxFailPos) { return; }

// @ts-ignore
    if (peg$currPos > peg$maxFailPos) {
// @ts-ignore
      peg$maxFailPos = peg$currPos;
// @ts-ignore
      peg$maxFailExpected = [];
    }

// @ts-ignore
    peg$maxFailExpected.push(expected);
  }

// @ts-ignore
  function peg$buildSimpleError(message, location) {
// @ts-ignore
    return new peg$SyntaxError(message, null, null, location);
  }

// @ts-ignore
  function peg$buildStructuredError(expected, found, location) {
// @ts-ignore
    return new peg$SyntaxError(
// @ts-ignore
      peg$SyntaxError.buildMessage(expected, found),
// @ts-ignore
      expected,
// @ts-ignore
      found,
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function // @ts-ignore
peg$parsesearch() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsespaces();
// @ts-ignore
    s2 = [];
// @ts-ignore
    s3 = peg$parseterm();
// @ts-ignore
    while (s3 !== peg$FAILED) {
// @ts-ignore
      s2.push(s3);
// @ts-ignore
      s3 = peg$parseterm();
    }
// @ts-ignore
    peg$savedPos = s0;
// @ts-ignore
    s0 = peg$f0(s1, s2);

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsesimple_search() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsespaces();
// @ts-ignore
    s2 = [];
// @ts-ignore
    s3 = peg$parsesimple_term();
// @ts-ignore
    while (s3 !== peg$FAILED) {
// @ts-ignore
      s2.push(s3);
// @ts-ignore
      s3 = peg$parsesimple_term();
    }
// @ts-ignore
    peg$savedPos = s0;
// @ts-ignore
    s0 = peg$f1(s1, s2);

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseterm() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseboolean_operator();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseparen_group();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parsefilter();
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          s1 = peg$parsefree_text();
        }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsespaces();
// @ts-ignore
      s1 = [s1, s2];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsesimple_term() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseboolean_operator();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseparen_group();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parsesimple_filter();
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          s1 = peg$parsefree_text();
        }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsespaces();
// @ts-ignore
      s1 = [s1, s2];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseboolean_operator() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseor_operator();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseand_operator();
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f2();
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseparen_group() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseopen_paren();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsespaces();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$parseterm();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        while (s4 !== peg$FAILED) {
// @ts-ignore
          s3.push(s4);
// @ts-ignore
          s4 = peg$parseterm();
        }
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parseclosed_paren();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f3(s2, s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsefree_text() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parsefree_text_quoted();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsefree_text_unquoted();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsefree_text_unquoted() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$currPos;
// @ts-ignore
    s3 = peg$currPos;
// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    s4 = peg$parsefilter();
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s4 === peg$FAILED) {
// @ts-ignore
      s3 = undefined;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s3;
// @ts-ignore
      s3 = peg$FAILED;
    }
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s5 = peg$parseboolean_operator();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s4 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parsefree_parens();
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s5 = [];
// @ts-ignore
          s6 = input.charAt(peg$currPos);
// @ts-ignore
          if (peg$r0.test(s6)) {
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e0); }
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            while (s6 !== peg$FAILED) {
// @ts-ignore
              s5.push(s6);
// @ts-ignore
              s6 = input.charAt(peg$currPos);
// @ts-ignore
              if (peg$r0.test(s6)) {
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s6 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
            }
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
          }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsespaces();
// @ts-ignore
          s3 = [s3, s4, s5, s6];
// @ts-ignore
          s2 = s3;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s2;
// @ts-ignore
          s2 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s2;
// @ts-ignore
      s2 = peg$FAILED;
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      while (s2 !== peg$FAILED) {
// @ts-ignore
        s1.push(s2);
// @ts-ignore
        s2 = peg$currPos;
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        s4 = peg$parsefilter();
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s3 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$currPos;
// @ts-ignore
          peg$silentFails++;
// @ts-ignore
          s5 = peg$parseboolean_operator();
// @ts-ignore
          peg$silentFails--;
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            s4 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            s5 = peg$parsefree_parens();
// @ts-ignore
            if (s5 === peg$FAILED) {
// @ts-ignore
              s5 = [];
// @ts-ignore
              s6 = input.charAt(peg$currPos);
// @ts-ignore
              if (peg$r0.test(s6)) {
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s6 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
// @ts-ignore
              if (s6 !== peg$FAILED) {
// @ts-ignore
                while (s6 !== peg$FAILED) {
// @ts-ignore
                  s5.push(s6);
// @ts-ignore
                  s6 = input.charAt(peg$currPos);
// @ts-ignore
                  if (peg$r0.test(s6)) {
// @ts-ignore
                    peg$currPos++;
// @ts-ignore
                  } else {
// @ts-ignore
                    s6 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                }
// @ts-ignore
              } else {
// @ts-ignore
                s5 = peg$FAILED;
              }
            }
// @ts-ignore
            if (s5 !== peg$FAILED) {
// @ts-ignore
              s6 = peg$parsespaces();
// @ts-ignore
              s3 = [s3, s4, s5, s6];
// @ts-ignore
              s2 = s3;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s2;
// @ts-ignore
              s2 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s2;
// @ts-ignore
            s2 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s2;
// @ts-ignore
          s2 = peg$FAILED;
        }
      }
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f4();
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsefree_text_quoted() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsequoted_value();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f5(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsefree_parens() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseopen_paren();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsefree_text();
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      s3 = peg$parseclosed_paren();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2, s3];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsefilter() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parsesimple_filter();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseaggregate_filter();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsesimple_filter() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parsedate_filter();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsespecific_date_filter();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parserel_date_filter();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseduration_filter();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parsesize_filter();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parseboolean_filter();
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$parsenumeric_in_filter();
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  s0 = peg$parsenumeric_filter();
// @ts-ignore
                  if (s0 === peg$FAILED) {
// @ts-ignore
                    s0 = peg$parsehas_filter();
// @ts-ignore
                    if (s0 === peg$FAILED) {
// @ts-ignore
                      s0 = peg$parseis_filter();
// @ts-ignore
                      if (s0 === peg$FAILED) {
// @ts-ignore
                        s0 = peg$parsetext_in_filter();
// @ts-ignore
                        if (s0 === peg$FAILED) {
// @ts-ignore
                          s0 = peg$parsetext_filter();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseaggregate_filter() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseaggregate_duration_filter();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseaggregate_size_filter();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseaggregate_numeric_filter();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseaggregate_percentage_filter();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseaggregate_date_filter();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parseaggregate_rel_date_filter();
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsedate_filter() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsesearch_key();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsesep();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parseoperator();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parseiso_8601_date_format();
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = peg$currPos;
// @ts-ignore
            s5 = peg$f6(s1, s3, s4);
// @ts-ignore
            if (s5) {
// @ts-ignore
              s5 = undefined;
// @ts-ignore
            } else {
// @ts-ignore
              s5 = peg$FAILED;
            }
// @ts-ignore
            if (s5 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f7(s1, s3, s4);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsespecific_date_filter() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsesearch_key();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsesep();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parseiso_8601_date_format();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = peg$currPos;
// @ts-ignore
          s4 = peg$f8(s1, s3);
// @ts-ignore
          if (s4) {
// @ts-ignore
            s4 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f9(s1, s3);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parserel_date_filter() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsesearch_key();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsesep();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parserel_date_format();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = peg$currPos;
// @ts-ignore
          s4 = peg$f10(s1, s3);
// @ts-ignore
          if (s4) {
// @ts-ignore
            s4 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f11(s1, s3);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseduration_filter() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsenegation();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parsesearch_key();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parsesep();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parseoperator();
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = null;
        }
// @ts-ignore
        s5 = peg$parseduration_format();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = peg$currPos;
// @ts-ignore
          s6 = peg$f12(s1, s2, s4, s5);
// @ts-ignore
          if (s6) {
// @ts-ignore
            s6 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f13(s1, s2, s4, s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsesize_filter() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsenegation();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parsesearch_key();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parsesep();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parseoperator();
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = null;
        }
// @ts-ignore
        s5 = peg$parsesize_format();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = peg$currPos;
// @ts-ignore
          s6 = peg$f14(s1, s2, s4, s5);
// @ts-ignore
          if (s6) {
// @ts-ignore
            s6 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f15(s1, s2, s4, s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseboolean_filter() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsenegation();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parsesearch_key();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parsesep();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parseboolean_value();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = peg$currPos;
// @ts-ignore
          s5 = peg$f16(s1, s2, s4);
// @ts-ignore
          if (s5) {
// @ts-ignore
            s5 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f17(s1, s2, s4);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsenumeric_in_filter() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsenegation();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parsesearch_key();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parsesep();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsenumeric_in_list();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = peg$currPos;
// @ts-ignore
          s5 = peg$f18(s1, s2, s4);
// @ts-ignore
          if (s5) {
// @ts-ignore
            s5 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f19(s1, s2, s4);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsenumeric_filter() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsenegation();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parsesearch_key();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parsesep();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parseoperator();
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = null;
        }
// @ts-ignore
        s5 = peg$parsenumeric_value();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = peg$currPos;
// @ts-ignore
          s6 = peg$f20(s1, s2, s4, s5);
// @ts-ignore
          if (s6) {
// @ts-ignore
            s6 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f21(s1, s2, s4, s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseaggregate_duration_filter() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsenegation();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parseaggregate_key();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parsesep();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parseoperator();
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = null;
        }
// @ts-ignore
        s5 = peg$parseduration_format();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = peg$currPos;
// @ts-ignore
          s6 = peg$f22(s1, s2, s4, s5);
// @ts-ignore
          if (s6) {
// @ts-ignore
            s6 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f23(s1, s2, s4, s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseaggregate_size_filter() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsenegation();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parseaggregate_key();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parsesep();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parseoperator();
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = null;
        }
// @ts-ignore
        s5 = peg$parsesize_format();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = peg$currPos;
// @ts-ignore
          s6 = peg$f24(s1, s2, s4, s5);
// @ts-ignore
          if (s6) {
// @ts-ignore
            s6 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f25(s1, s2, s4, s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseaggregate_percentage_filter() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsenegation();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parseaggregate_key();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parsesep();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parseoperator();
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = null;
        }
// @ts-ignore
        s5 = peg$parsepercentage_format();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = peg$currPos;
// @ts-ignore
          s6 = peg$f26(s1, s2, s4, s5);
// @ts-ignore
          if (s6) {
// @ts-ignore
            s6 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f27(s1, s2, s4, s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseaggregate_numeric_filter() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsenegation();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parseaggregate_key();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parsesep();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parseoperator();
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = null;
        }
// @ts-ignore
        s5 = peg$parsenumeric_value();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = peg$currPos;
// @ts-ignore
          s6 = peg$f28(s1, s2, s4, s5);
// @ts-ignore
          if (s6) {
// @ts-ignore
            s6 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f29(s1, s2, s4, s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseaggregate_date_filter() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsenegation();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parseaggregate_key();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parsesep();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parseoperator();
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = null;
        }
// @ts-ignore
        s5 = peg$parseiso_8601_date_format();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = peg$currPos;
// @ts-ignore
          s6 = peg$f30(s1, s2, s4, s5);
// @ts-ignore
          if (s6) {
// @ts-ignore
            s6 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f31(s1, s2, s4, s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseaggregate_rel_date_filter() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsenegation();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parseaggregate_key();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parsesep();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parseoperator();
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = null;
        }
// @ts-ignore
        s5 = peg$parserel_date_format();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = peg$currPos;
// @ts-ignore
          s6 = peg$f32(s1, s2, s4, s5);
// @ts-ignore
          if (s6) {
// @ts-ignore
            s6 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f33(s1, s2, s4, s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsehas_filter() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsenegation();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$currPos;
// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c0) {
// @ts-ignore
      s3 = peg$c0;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s3 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      peg$currPos = s2;
// @ts-ignore
      s2 = undefined;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parsesearch_key();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsesep();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parsesearch_key();
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            s5 = peg$parsesearch_value();
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = peg$currPos;
// @ts-ignore
            s6 = peg$f34(s1, s3, s5);
// @ts-ignore
            if (s6) {
// @ts-ignore
              s6 = undefined;
// @ts-ignore
            } else {
// @ts-ignore
              s6 = peg$FAILED;
            }
// @ts-ignore
            if (s6 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f35(s1, s3, s5);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseis_filter() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsenegation();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$currPos;
// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c1) {
// @ts-ignore
      s3 = peg$c1;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s3 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      peg$currPos = s2;
// @ts-ignore
      s2 = undefined;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parsesearch_key();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsesep();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parsesearch_value();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = peg$currPos;
// @ts-ignore
            s6 = peg$f36(s1, s3, s5);
// @ts-ignore
            if (s6) {
// @ts-ignore
              s6 = undefined;
// @ts-ignore
            } else {
// @ts-ignore
              s6 = peg$FAILED;
            }
// @ts-ignore
            if (s6 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f37(s1, s3, s5);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetext_in_filter() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsenegation();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parsetext_key();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parsesep();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsetext_in_list();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = peg$currPos;
// @ts-ignore
          s5 = peg$f38(s1, s2, s4);
// @ts-ignore
          if (s5) {
// @ts-ignore
            s5 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f39(s1, s2, s4);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetext_filter() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsenegation();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parsetext_key();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parsesep();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$parseoperator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = peg$currPos;
// @ts-ignore
          s6 = peg$f40(s1, s2);
// @ts-ignore
          if (s6) {
// @ts-ignore
            s6 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = null;
        }
// @ts-ignore
        s5 = peg$parsesearch_value();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = peg$currPos;
// @ts-ignore
          s6 = peg$f41(s1, s2, s4, s5);
// @ts-ignore
          if (s6) {
// @ts-ignore
            s6 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f42(s1, s2, s4, s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsekey() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r1.test(s2)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      while (s2 !== peg$FAILED) {
// @ts-ignore
        s1.push(s2);
// @ts-ignore
        s2 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r1.test(s2)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
      }
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f43(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsequoted_key() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
      s1 = peg$c2;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r2.test(s3)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        while (s3 !== peg$FAILED) {
// @ts-ignore
          s2.push(s3);
// @ts-ignore
          s3 = input.charAt(peg$currPos);
// @ts-ignore
          if (peg$r2.test(s3)) {
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s3 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
        }
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
          s3 = peg$c2;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f44(s2);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseexplicit_tag_key() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c3) {
// @ts-ignore
      s1 = peg$c3;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseopen_bracket();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parsesearch_key();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parseclosed_bracket();
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f45(s1, s3);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseaggregate_key() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsekey();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseopen_paren();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parsespaces();
// @ts-ignore
        s4 = peg$parsefunction_args();
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = null;
        }
// @ts-ignore
        s5 = peg$parsespaces();
// @ts-ignore
        s6 = peg$parseclosed_paren();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f46(s1, s3, s4, s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsefunction_args() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseaggregate_param();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parsespaces();
// @ts-ignore
      s5 = peg$parsecomma();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parsespaces();
// @ts-ignore
        s7 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        s8 = peg$parsecomma();
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s8 === peg$FAILED) {
// @ts-ignore
          s7 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s7;
// @ts-ignore
          s7 = peg$FAILED;
        }
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parseaggregate_param_or_search();
// @ts-ignore
          if (s8 === peg$FAILED) {
// @ts-ignore
            s8 = null;
          }
// @ts-ignore
          s4 = [s4, s5, s6, s7, s8];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parsespaces();
// @ts-ignore
        s5 = peg$parsecomma();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsespaces();
// @ts-ignore
          s7 = peg$currPos;
// @ts-ignore
          peg$silentFails++;
// @ts-ignore
          s8 = peg$parsecomma();
// @ts-ignore
          peg$silentFails--;
// @ts-ignore
          if (s8 === peg$FAILED) {
// @ts-ignore
            s7 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s7;
// @ts-ignore
            s7 = peg$FAILED;
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parseaggregate_param_or_search();
// @ts-ignore
            if (s8 === peg$FAILED) {
// @ts-ignore
              s8 = null;
            }
// @ts-ignore
            s4 = [s4, s5, s6, s7, s8];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f47(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseaggregate_param_or_search() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parsesimple_search();

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseaggregate_param() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parsequoted_aggregate_param();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseraw_aggregate_param();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseraw_aggregate_param() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r3.test(s2)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      while (s2 !== peg$FAILED) {
// @ts-ignore
        s1.push(s2);
// @ts-ignore
        s2 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r3.test(s2)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
      }
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f48(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsequoted_aggregate_param() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
      s1 = peg$c2;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c4) {
// @ts-ignore
        s3 = peg$c4;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r4.test(s3)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c4) {
// @ts-ignore
          s3 = peg$c4;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e8); }
        }
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          s3 = input.charAt(peg$currPos);
// @ts-ignore
          if (peg$r4.test(s3)) {
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s3 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
        }
      }
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
        s3 = peg$c2;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f49(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsesearch_key() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parsekey();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsequoted_key();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetext_key() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseexplicit_tag_key();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsesearch_key();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsevalue() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r5.test(s2)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
// @ts-ignore
    while (s2 !== peg$FAILED) {
// @ts-ignore
      s1.push(s2);
// @ts-ignore
      s2 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r5.test(s2)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
    }
// @ts-ignore
    peg$savedPos = s0;
// @ts-ignore
    s1 = peg$f50(s1);
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsequoted_value() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
      s1 = peg$c2;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c4) {
// @ts-ignore
        s3 = peg$c4;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r6.test(s3)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c4) {
// @ts-ignore
          s3 = peg$c4;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e8); }
        }
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          s3 = input.charAt(peg$currPos);
// @ts-ignore
          if (peg$r6.test(s3)) {
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s3 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e11); }
          }
        }
      }
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
        s3 = peg$c2;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f51(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsein_value() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$currPos;
// @ts-ignore
    s3 = peg$currPos;
// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    s4 = peg$parsein_value_termination();
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s4 !== peg$FAILED) {
// @ts-ignore
      peg$currPos = s3;
// @ts-ignore
      s3 = undefined;
// @ts-ignore
    } else {
// @ts-ignore
      s3 = peg$FAILED;
    }
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s4 = peg$parsein_value_char();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s3 = [s3, s4];
// @ts-ignore
        s2 = s3;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s2;
// @ts-ignore
      s2 = peg$FAILED;
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      while (s2 !== peg$FAILED) {
// @ts-ignore
        s1.push(s2);
// @ts-ignore
        s2 = peg$currPos;
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        s4 = peg$parsein_value_termination();
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parsein_value_char();
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            s3 = [s3, s4];
// @ts-ignore
            s2 = s3;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s2;
// @ts-ignore
            s2 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s2;
// @ts-ignore
          s2 = peg$FAILED;
        }
      }
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f52();
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetext_in_value() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parsequoted_value();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsein_value();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsesearch_value() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parsequoted_value();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsevalue();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsenumeric_value() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 45) {
// @ts-ignore
      s2 = peg$c5;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s2 = null;
    }
// @ts-ignore
    s3 = peg$parsenumeric();
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s2 = [s2, s3];
// @ts-ignore
      s1 = s2;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsenumber_unit();
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s4 = peg$parseend_value();
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s4 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r7.test(s4)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
      }
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f53(s1, s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseboolean_value() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = input.substr(peg$currPos, 4);
// @ts-ignore
    if (s1.toLowerCase() === peg$c6) {
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 49) {
// @ts-ignore
        s1 = peg$c7;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e15); }
      }
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = input.substr(peg$currPos, 5);
// @ts-ignore
        if (s1.toLowerCase() === peg$c8) {
// @ts-ignore
          peg$currPos += 5;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e16); }
        }
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 48) {
// @ts-ignore
            s1 = peg$c9;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e17); }
          }
        }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseend_value();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f54(s1);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetext_in_list() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseopen_bracket();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsetext_in_value();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = [];
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$parsespaces();
// @ts-ignore
        s6 = peg$parsecomma();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parsespaces();
// @ts-ignore
          s8 = peg$currPos;
// @ts-ignore
          peg$silentFails++;
// @ts-ignore
          s9 = peg$parsecomma();
// @ts-ignore
          peg$silentFails--;
// @ts-ignore
          if (s9 === peg$FAILED) {
// @ts-ignore
            s8 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s8;
// @ts-ignore
            s8 = peg$FAILED;
          }
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s9 = peg$parsetext_in_value();
// @ts-ignore
            if (s9 === peg$FAILED) {
// @ts-ignore
              s9 = null;
            }
// @ts-ignore
            s5 = [s5, s6, s7, s8, s9];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        while (s4 !== peg$FAILED) {
// @ts-ignore
          s3.push(s4);
// @ts-ignore
          s4 = peg$currPos;
// @ts-ignore
          s5 = peg$parsespaces();
// @ts-ignore
          s6 = peg$parsecomma();
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            s7 = peg$parsespaces();
// @ts-ignore
            s8 = peg$currPos;
// @ts-ignore
            peg$silentFails++;
// @ts-ignore
            s9 = peg$parsecomma();
// @ts-ignore
            peg$silentFails--;
// @ts-ignore
            if (s9 === peg$FAILED) {
// @ts-ignore
              s8 = undefined;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s8;
// @ts-ignore
              s8 = peg$FAILED;
            }
// @ts-ignore
            if (s8 !== peg$FAILED) {
// @ts-ignore
              s9 = peg$parsetext_in_value();
// @ts-ignore
              if (s9 === peg$FAILED) {
// @ts-ignore
                s9 = null;
              }
// @ts-ignore
              s5 = [s5, s6, s7, s8, s9];
// @ts-ignore
              s4 = s5;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s4;
// @ts-ignore
              s4 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
        }
// @ts-ignore
        s4 = peg$parseclosed_bracket();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$currPos;
// @ts-ignore
          peg$silentFails++;
// @ts-ignore
          s6 = peg$parseend_value();
// @ts-ignore
          peg$silentFails--;
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f55(s2, s3);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsenumeric_in_list() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseopen_bracket();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsenumeric_value();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = [];
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$parsespaces();
// @ts-ignore
        s6 = peg$parsecomma();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parsespaces();
// @ts-ignore
          s8 = peg$currPos;
// @ts-ignore
          peg$silentFails++;
// @ts-ignore
          s9 = peg$parsecomma();
// @ts-ignore
          peg$silentFails--;
// @ts-ignore
          if (s9 === peg$FAILED) {
// @ts-ignore
            s8 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s8;
// @ts-ignore
            s8 = peg$FAILED;
          }
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s9 = peg$parsenumeric_value();
// @ts-ignore
            if (s9 === peg$FAILED) {
// @ts-ignore
              s9 = null;
            }
// @ts-ignore
            s5 = [s5, s6, s7, s8, s9];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        while (s4 !== peg$FAILED) {
// @ts-ignore
          s3.push(s4);
// @ts-ignore
          s4 = peg$currPos;
// @ts-ignore
          s5 = peg$parsespaces();
// @ts-ignore
          s6 = peg$parsecomma();
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            s7 = peg$parsespaces();
// @ts-ignore
            s8 = peg$currPos;
// @ts-ignore
            peg$silentFails++;
// @ts-ignore
            s9 = peg$parsecomma();
// @ts-ignore
            peg$silentFails--;
// @ts-ignore
            if (s9 === peg$FAILED) {
// @ts-ignore
              s8 = undefined;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s8;
// @ts-ignore
              s8 = peg$FAILED;
            }
// @ts-ignore
            if (s8 !== peg$FAILED) {
// @ts-ignore
              s9 = peg$parsenumeric_value();
// @ts-ignore
              if (s9 === peg$FAILED) {
// @ts-ignore
                s9 = null;
              }
// @ts-ignore
              s5 = [s5, s6, s7, s8, s9];
// @ts-ignore
              s4 = s5;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s4;
// @ts-ignore
              s4 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
        }
// @ts-ignore
        s4 = peg$parseclosed_bracket();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$currPos;
// @ts-ignore
          peg$silentFails++;
// @ts-ignore
          s6 = peg$parseend_value();
// @ts-ignore
          peg$silentFails--;
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f56(s2, s3);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsein_value_termination() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsein_value_char();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s5 = peg$parsein_value_end();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s4 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parsein_value_char();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        s5 = peg$parsein_value_end();
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s4 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parsein_value_char();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      s3 = peg$parsein_value_end();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2, s3];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsein_value_char() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r8.test(s0)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsein_value_end() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$parseclosed_bracket();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parsespaces();
// @ts-ignore
      s2 = peg$parsecomma();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsenum2() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r9.test(s1)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r9.test(s2)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsenum4() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r9.test(s1)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r9.test(s2)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r9.test(s3)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = input.charAt(peg$currPos);
// @ts-ignore
          if (peg$r9.test(s4)) {
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s4 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e19); }
          }
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            s1 = [s1, s2, s3, s4];
// @ts-ignore
            s0 = s1;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsedate_format() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsenum4();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 45) {
// @ts-ignore
        s2 = peg$c5;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parsenum2();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 45) {
// @ts-ignore
            s4 = peg$c5;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s4 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e12); }
          }
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            s5 = peg$parsenum2();
// @ts-ignore
            if (s5 !== peg$FAILED) {
// @ts-ignore
              s1 = [s1, s2, s3, s4, s5];
// @ts-ignore
              s0 = s1;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetime_format() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 84) {
// @ts-ignore
      s1 = peg$c10;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsenum2();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
          s3 = peg$c11;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parsenum2();
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
              s5 = peg$c11;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s5 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e21); }
            }
// @ts-ignore
            if (s5 !== peg$FAILED) {
// @ts-ignore
              s6 = peg$parsenum2();
// @ts-ignore
              if (s6 !== peg$FAILED) {
// @ts-ignore
                s7 = peg$currPos;
// @ts-ignore
                if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
                  s8 = peg$c12;
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s8 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
// @ts-ignore
                if (s8 !== peg$FAILED) {
// @ts-ignore
                  s9 = peg$parsems_format();
// @ts-ignore
                  if (s9 !== peg$FAILED) {
// @ts-ignore
                    s8 = [s8, s9];
// @ts-ignore
                    s7 = s8;
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s7;
// @ts-ignore
                    s7 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s7;
// @ts-ignore
                  s7 = peg$FAILED;
                }
// @ts-ignore
                if (s7 === peg$FAILED) {
// @ts-ignore
                  s7 = null;
                }
// @ts-ignore
                s1 = [s1, s2, s3, s4, s5, s6, s7];
// @ts-ignore
                s0 = s1;
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsems_format() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r9.test(s1)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r9.test(s2)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      s3 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r9.test(s3)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r9.test(s4)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s4 = null;
      }
// @ts-ignore
      s5 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r9.test(s5)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s5 = null;
      }
// @ts-ignore
      s6 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r9.test(s6)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s6 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
// @ts-ignore
      if (s6 === peg$FAILED) {
// @ts-ignore
        s6 = null;
      }
// @ts-ignore
      s1 = [s1, s2, s3, s4, s5, s6];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetz_format() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r10.test(s1)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsenum2();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
          s3 = peg$c11;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parsenum2();
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            s1 = [s1, s2, s3, s4];
// @ts-ignore
            s0 = s1;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseiso_8601_date_format() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsedate_format();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsetime_format();
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 90) {
// @ts-ignore
        s3 = peg$c13;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = peg$parsetz_format();
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s5 = peg$parseend_value();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f57();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parserel_date_format() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r10.test(s1)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r9.test(s3)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        while (s3 !== peg$FAILED) {
// @ts-ignore
          s2.push(s3);
// @ts-ignore
          s3 = input.charAt(peg$currPos);
// @ts-ignore
          if (peg$r9.test(s3)) {
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s3 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e19); }
          }
        }
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r11.test(s3)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$currPos;
// @ts-ignore
          peg$silentFails++;
// @ts-ignore
          s5 = peg$parseend_value();
// @ts-ignore
          peg$silentFails--;
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f58(s1, s2, s3);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseduration_format() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsenumeric();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseduration_unit();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        s4 = peg$parseend_value();
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f59(s1, s2);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsesize_format() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsenumeric();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsesize_unit();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        s4 = peg$parseend_value();
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f60(s1, s2);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsepercentage_format() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsenumeric();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 37) {
// @ts-ignore
        s2 = peg$c14;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e26); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f61(s1);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsenumber_unit() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r12.test(s0)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseduration_unit() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c15) {
// @ts-ignore
      s0 = peg$c15;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 115) {
// @ts-ignore
        s0 = peg$c16;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 3) === peg$c17) {
// @ts-ignore
          s0 = peg$c17;
// @ts-ignore
          peg$currPos += 3;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e30); }
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 109) {
// @ts-ignore
            s0 = peg$c18;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s0 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e31); }
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 2) === peg$c19) {
// @ts-ignore
              s0 = peg$c19;
// @ts-ignore
              peg$currPos += 2;
// @ts-ignore
            } else {
// @ts-ignore
              s0 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e32); }
            }
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 104) {
// @ts-ignore
                s0 = peg$c20;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s0 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e33); }
              }
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                if (input.substr(peg$currPos, 3) === peg$c21) {
// @ts-ignore
                  s0 = peg$c21;
// @ts-ignore
                  peg$currPos += 3;
// @ts-ignore
                } else {
// @ts-ignore
                  s0 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e34); }
                }
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  if (input.charCodeAt(peg$currPos) === 100) {
// @ts-ignore
                    s0 = peg$c22;
// @ts-ignore
                    peg$currPos++;
// @ts-ignore
                  } else {
// @ts-ignore
                    s0 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e35); }
                  }
// @ts-ignore
                  if (s0 === peg$FAILED) {
// @ts-ignore
                    if (input.substr(peg$currPos, 2) === peg$c23) {
// @ts-ignore
                      s0 = peg$c23;
// @ts-ignore
                      peg$currPos += 2;
// @ts-ignore
                    } else {
// @ts-ignore
                      s0 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e36); }
                    }
// @ts-ignore
                    if (s0 === peg$FAILED) {
// @ts-ignore
                      if (input.charCodeAt(peg$currPos) === 119) {
// @ts-ignore
                        s0 = peg$c24;
// @ts-ignore
                        peg$currPos++;
// @ts-ignore
                      } else {
// @ts-ignore
                        s0 = peg$FAILED;
// @ts-ignore
                        if (peg$silentFails === 0) { peg$fail(peg$e37); }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsesize_unit() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parsebit_unit();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsebyte_unit();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsebit_unit() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = input.substr(peg$currPos, 3);
// @ts-ignore
    if (s0.toLowerCase() === peg$c25) {
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = input.substr(peg$currPos, 3);
// @ts-ignore
      if (s0.toLowerCase() === peg$c26) {
// @ts-ignore
        peg$currPos += 3;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = input.substr(peg$currPos, 3);
// @ts-ignore
        if (s0.toLowerCase() === peg$c27) {
// @ts-ignore
          peg$currPos += 3;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e40); }
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = input.substr(peg$currPos, 3);
// @ts-ignore
          if (s0.toLowerCase() === peg$c28) {
// @ts-ignore
            peg$currPos += 3;
// @ts-ignore
          } else {
// @ts-ignore
            s0 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e41); }
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = input.substr(peg$currPos, 3);
// @ts-ignore
            if (s0.toLowerCase() === peg$c29) {
// @ts-ignore
              peg$currPos += 3;
// @ts-ignore
            } else {
// @ts-ignore
              s0 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e42); }
            }
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = input.substr(peg$currPos, 3);
// @ts-ignore
              if (s0.toLowerCase() === peg$c30) {
// @ts-ignore
                peg$currPos += 3;
// @ts-ignore
              } else {
// @ts-ignore
                s0 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e43); }
              }
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = input.substr(peg$currPos, 3);
// @ts-ignore
                if (s0.toLowerCase() === peg$c31) {
// @ts-ignore
                  peg$currPos += 3;
// @ts-ignore
                } else {
// @ts-ignore
                  s0 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e44); }
                }
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  s0 = input.substr(peg$currPos, 3);
// @ts-ignore
                  if (s0.toLowerCase() === peg$c32) {
// @ts-ignore
                    peg$currPos += 3;
// @ts-ignore
                  } else {
// @ts-ignore
                    s0 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e45); }
                  }
// @ts-ignore
                  if (s0 === peg$FAILED) {
// @ts-ignore
                    s0 = input.substr(peg$currPos, 3);
// @ts-ignore
                    if (s0.toLowerCase() === peg$c33) {
// @ts-ignore
                      peg$currPos += 3;
// @ts-ignore
                    } else {
// @ts-ignore
                      s0 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e46); }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsebyte_unit() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = input.substr(peg$currPos, 5);
// @ts-ignore
    if (s0.toLowerCase() === peg$c34) {
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = input.substr(peg$currPos, 2);
// @ts-ignore
      if (s0.toLowerCase() === peg$c35) {
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = input.substr(peg$currPos, 2);
// @ts-ignore
        if (s0.toLowerCase() === peg$c36) {
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e49); }
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = input.substr(peg$currPos, 2);
// @ts-ignore
          if (s0.toLowerCase() === peg$c37) {
// @ts-ignore
            peg$currPos += 2;
// @ts-ignore
          } else {
// @ts-ignore
            s0 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e50); }
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = input.substr(peg$currPos, 2);
// @ts-ignore
            if (s0.toLowerCase() === peg$c38) {
// @ts-ignore
              peg$currPos += 2;
// @ts-ignore
            } else {
// @ts-ignore
              s0 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e51); }
            }
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = input.substr(peg$currPos, 2);
// @ts-ignore
              if (s0.toLowerCase() === peg$c39) {
// @ts-ignore
                peg$currPos += 2;
// @ts-ignore
              } else {
// @ts-ignore
                s0 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e52); }
              }
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = input.substr(peg$currPos, 2);
// @ts-ignore
                if (s0.toLowerCase() === peg$c40) {
// @ts-ignore
                  peg$currPos += 2;
// @ts-ignore
                } else {
// @ts-ignore
                  s0 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e53); }
                }
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  s0 = input.substr(peg$currPos, 2);
// @ts-ignore
                  if (s0.toLowerCase() === peg$c41) {
// @ts-ignore
                    peg$currPos += 2;
// @ts-ignore
                  } else {
// @ts-ignore
                    s0 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e54); }
                  }
// @ts-ignore
                  if (s0 === peg$FAILED) {
// @ts-ignore
                    s0 = input.substr(peg$currPos, 2);
// @ts-ignore
                    if (s0.toLowerCase() === peg$c42) {
// @ts-ignore
                      peg$currPos += 2;
// @ts-ignore
                    } else {
// @ts-ignore
                      s0 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e55); }
                    }
// @ts-ignore
                    if (s0 === peg$FAILED) {
// @ts-ignore
                      s0 = input.substr(peg$currPos, 2);
// @ts-ignore
                      if (s0.toLowerCase() === peg$c43) {
// @ts-ignore
                        peg$currPos += 2;
// @ts-ignore
                      } else {
// @ts-ignore
                        s0 = peg$FAILED;
// @ts-ignore
                        if (peg$silentFails === 0) { peg$fail(peg$e56); }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseoperator() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c44) {
// @ts-ignore
      s0 = peg$c44;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c45) {
// @ts-ignore
        s0 = peg$c45;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e58); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r13.test(s0)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e59); }
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 2) === peg$c46) {
// @ts-ignore
            s0 = peg$c46;
// @ts-ignore
            peg$currPos += 2;
// @ts-ignore
          } else {
// @ts-ignore
            s0 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e60); }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseor_operator() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = input.substr(peg$currPos, 2);
// @ts-ignore
    if (s1.toLowerCase() === peg$c47) {
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseend_value();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseand_operator() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = input.substr(peg$currPos, 3);
// @ts-ignore
    if (s1.toLowerCase() === peg$c48) {
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseend_value();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsenumeric() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r9.test(s2)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      while (s2 !== peg$FAILED) {
// @ts-ignore
        s1.push(s2);
// @ts-ignore
        s2 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r9.test(s2)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
      }
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
        s3 = peg$c12;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = [];
// @ts-ignore
        s5 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r9.test(s5)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
// @ts-ignore
        while (s5 !== peg$FAILED) {
// @ts-ignore
          s4.push(s5);
// @ts-ignore
          s5 = input.charAt(peg$currPos);
// @ts-ignore
          if (peg$r9.test(s5)) {
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e19); }
          }
        }
// @ts-ignore
        s3 = [s3, s4];
// @ts-ignore
        s2 = s3;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f62();
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseopen_paren() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
      s0 = peg$c49;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseclosed_paren() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
      s0 = peg$c50;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseopen_bracket() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
      s0 = peg$c51;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e65); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseclosed_bracket() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
      s0 = peg$c52;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsesep() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
      s0 = peg$c11;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsenegation() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 33) {
// @ts-ignore
      s0 = peg$c53;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecomma() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
      s0 = peg$c54;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsespaces() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 32) {
// @ts-ignore
      s2 = peg$c55;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e69); }
    }
// @ts-ignore
    while (s2 !== peg$FAILED) {
// @ts-ignore
      s1.push(s2);
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 32) {
// @ts-ignore
        s2 = peg$c55;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e69); }
      }
    }
// @ts-ignore
    peg$savedPos = s0;
// @ts-ignore
    s1 = peg$f63();
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseend_value() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r14.test(s0)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e70); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      if (input.length > peg$currPos) {
// @ts-ignore
        s1 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e71); }
      }
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s0 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }


// @ts-ignore
  const {TokenConverter, TermOperator, FilterType, config} = options;
// @ts-ignore
  const tc = new TokenConverter({text, location, config});

// @ts-ignore
  const opDefault = TermOperator.DEFAULT;

// @ts-ignore
  peg$result = peg$startRuleFunction();

// @ts-ignore
  if (options.peg$library) {
// @ts-ignore
    return /** @type {any} */ ({
// @ts-ignore
      peg$result,
// @ts-ignore
      peg$currPos,
// @ts-ignore
      peg$FAILED,
// @ts-ignore
      peg$maxFailExpected,
// @ts-ignore
      peg$maxFailPos
    });
  }
// @ts-ignore
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
// @ts-ignore
    return peg$result;
// @ts-ignore
  } else {
// @ts-ignore
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
// @ts-ignore
      peg$fail(peg$endExpectation());
    }

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      peg$maxFailExpected,
// @ts-ignore
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
// @ts-ignore
      peg$maxFailPos < input.length
// @ts-ignore
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
// @ts-ignore
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

// @ts-ignore
  return {
    StartRules: ["search"],
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
})()

export interface FilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface FileRange {
  start: FilePosition;
  end: FilePosition;
  source: string;
}

export interface LiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface ClassParts extends Array<string | ClassParts> {}

export interface ClassExpectation {
  type: "class";
  parts: ClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface AnyExpectation {
  type: "any";
}

export interface EndExpectation {
  type: "end";
}

export interface OtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = LiteralExpectation | ClassExpectation | AnyExpectation | EndExpectation | OtherExpectation;

declare class _PeggySyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null): string;
  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: FileRange;
  public name: string;
  constructor(message: string, expected: Expectation[], found: string | null, location: FileRange);
  format(sources: {
    source?: any;
    text: string;
  }[]): string;
}

export interface TraceEvent {
    type: string;
    rule: string;
    result?: any;
    location: FileRange;
  }

declare class _DefaultTracer {
  private indentLevel: number;
  public trace(event: TraceEvent): void;
}

peggyParser.SyntaxError.prototype.name = "PeggySyntaxError";

export interface ParseOptions {
  filename?: string;
  startRule?: "search";
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = <Options extends ParseOptions>(
    input: string,
    options?: Options
  ) => Options extends { startRule: infer StartRule } ?
    StartRule extends "search" ? Search : Search
    : Search;
export const parse: ParseFunction = peggyParser.parse;

export const PeggySyntaxError = peggyParser.SyntaxError as typeof _PeggySyntaxError;

export type PeggySyntaxError = _PeggySyntaxError;

// These types were autogenerated by ts-pegjs
export type Search = [
  Spaces,
  ...(Term[] extends (infer InnerArr)[]
    ? InnerArr extends (infer InnerArr)[]
      ? InnerArr
      : InnerArr
    : Term[])[]
];
export type SimpleSearch = [
  Spaces,
  ...(SimpleTerm[] extends (infer InnerArr)[]
    ? InnerArr extends (infer InnerArr)[]
      ? InnerArr
      : InnerArr
    : SimpleTerm[])[]
];
export type Term = [BooleanOperator | ParenGroup | Filter | FreeText, Spaces];
export type SimpleTerm = [
  BooleanOperator | ParenGroup | SimpleFilter | FreeText,
  Spaces
];
export type BooleanOperator = any;
export type ParenGroup = any;
export type FreeText = FreeTextQuoted | FreeTextUnquoted;
export type FreeTextUnquoted = any;
export type FreeTextQuoted = any;
export type FreeParens = [OpenParen, FreeText | null, ClosedParen];
export type Filter = SimpleFilter | AggregateFilter;
export type SimpleFilter =
  | DateFilter
  | SpecificDateFilter
  | RelDateFilter
  | DurationFilter
  | SizeFilter
  | BooleanFilter
  | NumericInFilter
  | NumericFilter
  | HasFilter
  | IsFilter
  | TextInFilter
  | TextFilter;
export type AggregateFilter =
  | AggregateDurationFilter
  | AggregateSizeFilter
  | AggregateNumericFilter
  | AggregatePercentageFilter
  | AggregateDateFilter
  | AggregateRelDateFilter;
export type DateFilter = any;
export type SpecificDateFilter = any;
export type RelDateFilter = any;
export type DurationFilter = any;
export type SizeFilter = any;
export type BooleanFilter = any;
export type NumericInFilter = any;
export type NumericFilter = any;
export type AggregateDurationFilter = any;
export type AggregateSizeFilter = any;
export type AggregatePercentageFilter = any;
export type AggregateNumericFilter = any;
export type AggregateDateFilter = any;
export type AggregateRelDateFilter = any;
export type HasFilter = any;
export type IsFilter = any;
export type TextInFilter = any;
export type TextFilter = any;
export type Key = any;
export type QuotedKey = any;
export type ExplicitTagKey = any;
export type AggregateKey = any;
export type FunctionArgs = any;
export type AggregateParamOrSearch = SimpleSearch | AggregateParam;
export type AggregateParam = QuotedAggregateParam | RawAggregateParam;
export type RawAggregateParam = any;
export type QuotedAggregateParam = any;
export type SearchKey = Key | QuotedKey;
export type TextKey = ExplicitTagKey | SearchKey;
export type Value = any;
export type QuotedValue = any;
export type InValue = any;
export type TextInValue = QuotedValue | InValue;
export type SearchValue = QuotedValue | Value;
export type NumericValue = any;
export type BooleanValue = any;
export type TextInList = any;
export type NumericInList = any;
export type InValueTermination = [
  InValueChar,
  [undefined, InValueChar][],
  InValueEnd
];
export type InValueChar = string;
export type InValueEnd = ClosedBracket | [Spaces, Comma];
export type Num2 = [string, string];
export type Num4 = [string, string, string, string];
export type DateFormat = [Num4, "-", Num2, "-", Num2];
export type TimeFormat = [
  "T",
  Num2,
  ":",
  Num2,
  ":",
  Num2,
  [".", MsFormat] | null
];
export type MsFormat = [
  string,
  string | null,
  string | null,
  string | null,
  string | null,
  string | null
];
export type TzFormat = [string, Num2, ":", Num2];
export type Iso8601DateFormat = any;
export type RelDateFormat = any;
export type DurationFormat = any;
export type SizeFormat = any;
export type PercentageFormat = any;
export type NumberUnit = string;
export type DurationUnit =
  | "ms"
  | "s"
  | "min"
  | "m"
  | "hr"
  | "h"
  | "day"
  | "d"
  | "wk"
  | "w";
export type SizeUnit = BitUnit | ByteUnit;
export type BitUnit = string;
export type ByteUnit = string;
export type Operator = ">=" | "<=" | string | "!=";
export type OrOperator = [string, undefined];
export type AndOperator = [string, undefined];
export type Numeric = string;
export type OpenParen = "(";
export type ClosedParen = ")";
export type OpenBracket = "[";
export type ClosedBracket = "]";
export type Sep = ":";
export type Negation = "!";
export type Comma = ",";
export type Spaces = any;
export type EndValue = string | undefined;

// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`select boolean > false 1`] = `
{
  "input": "plan:false",
  "result": {
    "ast": [
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "plan",
        },
        "op": "",
        "rhs": {
          "parsed": false,
          "type": "booleanVal",
          "value": "false",
        },
        "type": "qualifier",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select boolean > true 1`] = `
{
  "input": "plan:true",
  "result": {
    "ast": [
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "plan",
        },
        "op": "",
        "rhs": {
          "parsed": true,
          "type": "booleanVal",
          "value": "true",
        },
        "type": "qualifier",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select freeform > mixed throughout 1`] = `
{
  "input": "freeform1 age:5 freeform2 search",
  "result": {
    "ast": [
      {
        "type": "textVal",
        "value": "freeform1",
      },
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "age",
        },
        "op": "",
        "rhs": {
          "parsed": 5,
          "type": "numberVal",
          "value": "5",
        },
        "type": "qualifier",
      },
      {
        "type": "textVal",
        "value": "freeform2",
      },
      {
        "type": "textVal",
        "value": "search",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select freeform > quoted 1`] = `
{
  "input": ""a quoted:freeform" age:5",
  "result": {
    "ast": [
      {
        "quoted": true,
        "type": "textVal",
        "value": "a quoted:freeform",
      },
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "age",
        },
        "op": "",
        "rhs": {
          "parsed": 5,
          "type": "numberVal",
          "value": "5",
        },
        "type": "qualifier",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select freeform > treats as a string 1`] = `
{
  "input": "freeform",
  "result": {
    "ast": [
      {
        "type": "textVal",
        "value": "freeform",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select functions > boolean arguments 1`] = `
{
  "input": "my_func(true, false)",
  "result": {
    "ast": [
      {
        "args": [
          {
            "position": 0,
            "type": "functionArg",
            "vals": [
              {
                "parsed": true,
                "type": "booleanVal",
                "value": "true",
              },
            ],
          },
          {
            "position": 1,
            "type": "functionArg",
            "vals": [
              {
                "parsed": false,
                "type": "booleanVal",
                "value": "false",
              },
            ],
          },
        ],
        "name": "my_func",
        "op": undefined,
        "rhs": undefined,
        "type": "function",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select functions > boolean rhs 1`] = `
{
  "input": "my_func():true",
  "result": {
    "ast": [
      {
        "args": [],
        "name": "my_func",
        "op": "",
        "rhs": {
          "parsed": true,
          "type": "booleanVal",
          "value": "true",
        },
        "type": "function",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select functions > no args 1`] = `
{
  "input": "full_name()",
  "result": {
    "ast": [
      {
        "args": [],
        "name": "full_name",
        "op": undefined,
        "rhs": undefined,
        "type": "function",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select functions > no args with space 1`] = `
{
  "input": "full_name(  )",
  "result": {
    "ast": [
      {
        "args": [],
        "name": "full_name",
        "op": undefined,
        "rhs": undefined,
        "type": "function",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select functions > number arguments 1`] = `
{
  "input": "my_func(2, 0.5, -2)",
  "result": {
    "ast": [
      {
        "args": [
          {
            "position": 0,
            "type": "functionArg",
            "vals": [
              {
                "parsed": 2,
                "type": "numberVal",
                "value": "2",
              },
            ],
          },
          {
            "position": 1,
            "type": "functionArg",
            "vals": [
              {
                "parsed": 0.5,
                "type": "numberVal",
                "value": "0.5",
              },
            ],
          },
          {
            "position": 2,
            "type": "functionArg",
            "vals": [
              {
                "parsed": -2,
                "type": "numberVal",
                "value": "-2",
              },
            ],
          },
        ],
        "name": "my_func",
        "op": undefined,
        "rhs": undefined,
        "type": "function",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select functions > relative date rhs 1`] = `
{
  "input": "last_seen():-7d",
  "result": {
    "ast": [
      {
        "args": [],
        "name": "last_seen",
        "op": "",
        "rhs": {
          "parsed": 7,
          "sign": "-",
          "type": "relativeDateVal",
          "unit": "d",
          "value": "7",
        },
        "type": "function",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select functions > single string arg 1`] = `
{
  "input": "count(events)",
  "result": {
    "ast": [
      {
        "args": [
          {
            "position": 0,
            "type": "functionArg",
            "vals": [
              {
                "type": "textVal",
                "value": "events",
              },
            ],
          },
        ],
        "name": "count",
        "op": undefined,
        "rhs": undefined,
        "type": "function",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select functions > with filter argument 1`] = `
{
  "input": "count(projects, plan:free !has:email):>5",
  "result": {
    "ast": [
      {
        "args": [
          {
            "position": 0,
            "type": "functionArg",
            "vals": [
              {
                "type": "textVal",
                "value": "projects",
              },
            ],
          },
          {
            "position": 1,
            "type": "functionArg",
            "vals": [
              {
                "lhs": {
                  "type": "qualifierKey",
                  "value": "plan",
                },
                "op": "",
                "rhs": {
                  "type": "textVal",
                  "value": "free",
                },
                "type": "qualifier",
              },
              {
                "lhs": {
                  "type": "qualifierKey",
                  "value": "has",
                },
                "negated": true,
                "op": "",
                "rhs": {
                  "type": "textVal",
                  "value": "email",
                },
                "type": "qualifier",
              },
            ],
          },
        ],
        "name": "count",
        "op": ">",
        "rhs": {
          "parsed": 5,
          "type": "numberVal",
          "value": "5",
        },
        "type": "function",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select functions > with quoted argument 1`] = `
{
  "input": "count(projects, "free search"):>0.5",
  "result": {
    "ast": [
      {
        "args": [
          {
            "position": 0,
            "type": "functionArg",
            "vals": [
              {
                "type": "textVal",
                "value": "projects",
              },
            ],
          },
          {
            "position": 1,
            "type": "functionArg",
            "vals": [
              {
                "quoted": true,
                "type": "textVal",
                "value": "free search",
              },
            ],
          },
        ],
        "name": "count",
        "op": ">",
        "rhs": {
          "parsed": 0.5,
          "type": "numberVal",
          "value": "0.5",
        },
        "type": "function",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select functions > with rhs 1`] = `
{
  "input": "divide(projects, max_projects):>0.5",
  "result": {
    "ast": [
      {
        "args": [
          {
            "position": 0,
            "type": "functionArg",
            "vals": [
              {
                "type": "textVal",
                "value": "projects",
              },
            ],
          },
          {
            "position": 1,
            "type": "functionArg",
            "vals": [
              {
                "type": "textVal",
                "value": "max_projects",
              },
            ],
          },
        ],
        "name": "divide",
        "op": ">",
        "rhs": {
          "parsed": 0.5,
          "type": "numberVal",
          "value": "0.5",
        },
        "type": "function",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select in filters > negation 1`] = `
{
  "input": "!user:[jane, john]",
  "result": {
    "ast": [
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "user",
        },
        "negated": true,
        "op": "",
        "rhs": {
          "type": "qualifierIn",
          "values": [
            {
              "type": "textVal",
              "value": "jane",
            },
            {
              "type": "textVal",
              "value": "john",
            },
          ],
        },
        "type": "qualifier",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select in filters > numbers 1`] = `
{
  "input": "release:[12.0]",
  "result": {
    "ast": [
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "release",
        },
        "op": "",
        "rhs": {
          "type": "qualifierIn",
          "values": [
            {
              "parsed": 12,
              "type": "numberVal",
              "value": "12.0",
            },
          ],
        },
        "type": "qualifier",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select in filters > quoted 1`] = `
{
  "input": "release:[jane, "john doe"]",
  "result": {
    "ast": [
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "release",
        },
        "op": "",
        "rhs": {
          "type": "qualifierIn",
          "values": [
            {
              "type": "textVal",
              "value": "jane",
            },
            {
              "quoted": true,
              "type": "textVal",
              "value": "john doe",
            },
          ],
        },
        "type": "qualifier",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select in filters > works 1`] = `
{
  "input": "user:[jane, john]",
  "result": {
    "ast": [
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "user",
        },
        "op": "",
        "rhs": {
          "type": "qualifierIn",
          "values": [
            {
              "type": "textVal",
              "value": "jane",
            },
            {
              "type": "textVal",
              "value": "john",
            },
          ],
        },
        "type": "qualifier",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select operators > < 1`] = `
{
  "input": "num_members:<5.0",
  "result": {
    "ast": [
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "num_members",
        },
        "op": "<",
        "rhs": {
          "parsed": 5,
          "type": "numberVal",
          "value": "5.0",
        },
        "type": "qualifier",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select operators > <= 1`] = `
{
  "input": "num_members:<=5.0",
  "result": {
    "ast": [
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "num_members",
        },
        "op": "<=",
        "rhs": {
          "parsed": 5,
          "type": "numberVal",
          "value": "5.0",
        },
        "type": "qualifier",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select operators > = 1`] = `
{
  "input": "num_members:=5",
  "result": {
    "ast": [
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "num_members",
        },
        "op": "=",
        "rhs": {
          "parsed": 5,
          "type": "numberVal",
          "value": "5",
        },
        "type": "qualifier",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select operators > > 1`] = `
{
  "input": "num_members:>5.0",
  "result": {
    "ast": [
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "num_members",
        },
        "op": ">",
        "rhs": {
          "parsed": 5,
          "type": "numberVal",
          "value": "5.0",
        },
        "type": "qualifier",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select operators > >= 1`] = `
{
  "input": "num_members:>=5",
  "result": {
    "ast": [
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "num_members",
        },
        "op": ">=",
        "rhs": {
          "parsed": 5,
          "type": "numberVal",
          "value": "5",
        },
        "type": "qualifier",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select relative date > + 1`] = `
{
  "input": "renews_at:+30d",
  "result": {
    "ast": [
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "renews_at",
        },
        "op": "",
        "rhs": {
          "parsed": 30,
          "sign": "+",
          "type": "relativeDateVal",
          "unit": "d",
          "value": "30",
        },
        "type": "qualifier",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select relative date > - 1`] = `
{
  "input": "last_seen:-1d",
  "result": {
    "ast": [
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "last_seen",
        },
        "op": "",
        "rhs": {
          "parsed": 1,
          "sign": "-",
          "type": "relativeDateVal",
          "unit": "d",
          "value": "1",
        },
        "type": "qualifier",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select relative date > floats are not allowed 1`] = `
{
  "input": "renews_at:+1.2s",
  "result": {
    "ast": [
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "renews_at",
        },
        "op": undefined,
        "rhs": undefined,
        "type": "qualifier",
      },
      {
        "parsed": 1.2,
        "type": "numberVal",
        "value": "1.2",
      },
    ],
    "errors": [
      [MismatchedTokenException: Expecting token of type --> EOF <-- but found --> '+' <--],
    ],
  },
}
`;

exports[`select relative date > with other filters 1`] = `
{
  "input": "plan:free renews_at:+4w "free form"",
  "result": {
    "ast": [
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "plan",
        },
        "op": "",
        "rhs": {
          "type": "textVal",
          "value": "free",
        },
        "type": "qualifier",
      },
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "renews_at",
        },
        "op": "",
        "rhs": {
          "parsed": 4,
          "sign": "+",
          "type": "relativeDateVal",
          "unit": "w",
          "value": "4",
        },
        "type": "qualifier",
      },
      {
        "quoted": true,
        "type": "textVal",
        "value": "free form",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select text filters > .-_[0-9] in keys 1`] = `
{
  "input": "payments.plan-type_is2:free",
  "result": {
    "ast": [
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "payments.plan-type_is2",
        },
        "op": "",
        "rhs": {
          "type": "textVal",
          "value": "free",
        },
        "type": "qualifier",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select text filters > @.-_ in values 1`] = `
{
  "input": "email:jane@example.com type:public-company_x",
  "result": {
    "ast": [
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "email",
        },
        "op": "",
        "rhs": {
          "type": "textVal",
          "value": "jane@example.com",
        },
        "type": "qualifier",
      },
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "type",
        },
        "op": "",
        "rhs": {
          "type": "textVal",
          "value": "public-company_x",
        },
        "type": "qualifier",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select text filters > multiple 1`] = `
{
  "input": "plan:free age:5",
  "result": {
    "ast": [
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "plan",
        },
        "op": "",
        "rhs": {
          "type": "textVal",
          "value": "free",
        },
        "type": "qualifier",
      },
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "age",
        },
        "op": "",
        "rhs": {
          "parsed": 5,
          "type": "numberVal",
          "value": "5",
        },
        "type": "qualifier",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select text filters > negation 1`] = `
{
  "input": "!plan:free",
  "result": {
    "ast": [
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "plan",
        },
        "negated": true,
        "op": "",
        "rhs": {
          "type": "textVal",
          "value": "free",
        },
        "type": "qualifier",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select text filters > negation in quoted 1`] = `
{
  "input": "!user:"john doe"",
  "result": {
    "ast": [
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "user",
        },
        "negated": true,
        "op": "",
        "rhs": {
          "quoted": true,
          "type": "textVal",
          "value": "john doe",
        },
        "type": "qualifier",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select text filters > partial filter still parses 1`] = `
{
  "input": "age:> plan:free user:",
  "result": {
    "ast": [
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "age",
        },
        "op": ">",
        "rhs": undefined,
        "type": "qualifier",
      },
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "plan",
        },
        "op": "",
        "rhs": {
          "type": "textVal",
          "value": "free",
        },
        "type": "qualifier",
      },
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "user",
        },
        "op": undefined,
        "rhs": undefined,
        "type": "qualifier",
      },
    ],
    "errors": [
      [NoViableAltException: Expecting: one of these possible Token sequences:
  1. [LBracket]
  2. [RelativeDate]
  3. [LQuote]
  4. [Number]
  5. [Boolean]
  6. [Identifier]
but found: 'plan:'],
    ],
  },
}
`;

exports[`select text filters > quoted value 1`] = `
{
  "input": "user:"john doe"",
  "result": {
    "ast": [
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "user",
        },
        "op": "",
        "rhs": {
          "quoted": true,
          "type": "textVal",
          "value": "john doe",
        },
        "type": "qualifier",
      },
    ],
    "errors": [],
  },
}
`;

exports[`select text filters > works 1`] = `
{
  "input": "plan:free",
  "result": {
    "ast": [
      {
        "lhs": {
          "type": "qualifierKey",
          "value": "plan",
        },
        "op": "",
        "rhs": {
          "type": "textVal",
          "value": "free",
        },
        "type": "qualifier",
      },
    ],
    "errors": [],
  },
}
`;
